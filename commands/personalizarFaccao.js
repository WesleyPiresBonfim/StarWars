const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const db = require('../database.js');
const axios = require('axios'); // Para validar URLs de imagens

// Fun√ß√£o para validar cor hexadecimal
function isValidHexColor(color) {
    return /^#([0-9A-F]{3}){1,2}$/i.test(color);
}

// Fun√ß√£o para verificar se a URL √© v√°lida e aponta para uma imagem
async function isValidImageUrl(url) {
    if (!/\.(jpeg|jpg|png|gif)$/i.test(url)) return false; // Verifica a extens√£o

    try {
        const response = await axios.head(url);
        const contentType = response.headers['content-type'];
        return contentType.startsWith('image/');
    } catch (error) {
        return false;
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('personalizar-faccao')
        .setDescription('Personalize sua fac√ß√£o.')
        .addStringOption(option =>
    option.setName('emblema')
        .setDescription('Nova URL do emblema da fac√ß√£o')
        .setRequired(false))
        .addStringOption(option =>
    option.setName('descricao')
        .setDescription('Descri√ß√£o da fac√ß√£o (at√© 255 caracteres)')
        .setRequired(false))
        .addStringOption(option =>
    option.setName('cor')
        .setDescription('Cor da fac√ß√£o em hexadecimal (ex: #FF0000)')
        .setRequired(false)),
    async execute(interaction) {
        try {
            // Verificar se o bot est√° habilitado no servidor
            const serverId = interaction.guild.id;
            const serverQuery = 'SELECT habilitado FROM server_status WHERE servidor_id = $1';
            const serverStatus = await db.query(serverQuery, [serverId]);

            if (serverStatus.rowCount === 0 || !serverStatus.rows[0].habilitado) {
                return interaction.reply({
                    content: 'O StarWars est√° desativado neste servidor.',
                    ephemeral: true,
                });
            }

            // Dados do comando
            const emblema = interaction.options.getString('emblema') || null;
            const descricao = interaction.options.getString('descricao');
            const cor = interaction.options.getString('cor');
            const userId = interaction.user.id;

            // Buscar a fac√ß√£o do usu√°rio
            const factionQuery = 'SELECT * FROM factions WHERE leader_id = $1';
            const factionResult = await db.query(factionQuery, [userId]);

            if (factionResult.rowCount === 0) {
                return interaction.reply({
                    content: 'Voc√™ n√£o √© l√≠der de nenhuma fac√ß√£o e n√£o pode personaliz√°-la.',
                    ephemeral: true,
                });
            }

            const faction = factionResult.rows[0];

            // Valida√ß√µes
            if (descricao && descricao.length > 255) {
                return interaction.reply({
                    content: 'A descri√ß√£o deve ter no m√°ximo 255 caracteres.',
                    ephemeral: true,
                });
            }

            if (cor && !isValidHexColor(cor)) {
                return interaction.reply({
                    content: 'A cor deve estar em formato hexadecimal v√°lido, por exemplo, #FF0000.',
                    ephemeral: true,
                });
            }

            if (emblema && !(await isValidImageUrl(emblema))) {
                return interaction.reply({
                    content: 'A URL fornecida n√£o aponta para uma imagem v√°lida (.jpg, .jpeg, .png, .gif).',
                    ephemeral: true,
                });
            }

            // Atualizar fac√ß√£o no banco de dados
            const updateQuery = `
                UPDATE factions
                SET emblema = COALESCE($1, emblema),
                    descricao = COALESCE($2, descricao),
                    cor = COALESCE($3, cor)
                WHERE id = $4
            `;
            await db.query(updateQuery, [emblema, descricao, cor, faction.id]);

            // Embed de confirma√ß√£o
            const embed = new EmbedBuilder()
                .setColor(cor || faction.cor || '#8B0000')
                .setTitle('üè¥ Fac√ß√£o Personalizada')
                .setDescription(`Fac√ß√£o **${faction.nome}** personalizada com sucesso!`)
                .addFields(
                { name: 'Emblema', value: emblema || 'N√£o alterado', inline: true },
                { name: 'Descri√ß√£o', value: descricao || 'N√£o alterada', inline: true },
                { name: 'Cor', value: cor || 'N√£o alterada', inline: true },
            )
                .setThumbnail(emblema || faction.emblema || 'https://via.placeholder.com/150')
                .setFooter({ text: 'Personaliza√ß√£o de Fac√ß√£o', iconURL: interaction.user.displayAvatarURL() })
                .setTimestamp();

            await interaction.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Erro ao personalizar a fac√ß√£o:', error);
            await interaction.reply({
                content: 'Ocorreu um erro ao tentar personalizar a fac√ß√£o.',
                ephemeral: true,
            });
        }
    },
};
