const { SlashCommandBuilder } = require('@discordjs/builders');
const Tesseract = require('tesseract.js');
const fetch = require('node-fetch');

// Função para extrair os dados do jogador
function extrairDadosJogador(texto) {
    console.log("Texto extraído:", texto); // Exibir o texto completo para inspeção

    if (!texto || texto.trim().length === 0) {
        console.log("Texto vazio ou inválido");
        return {}; // Retorna um objeto vazio se o texto for inválido
    }

    // Limpeza do texto para remover caracteres indesejados
    texto = texto.replace(/[^a-zA-Z0-9áéíóúãõç\s]/g, "").toUpperCase();
    console.log("Texto limpo:", texto); // Exibir o texto após a limpeza

    let atributos = {
        pas: 0,
        fin: 0,
        dri: 0,
        vel: 0,
        def: 0,
        res: 0,
        alc: 0,
        con: 0,
        rep: 0,
        ref: 0,
        exp: 0,
        pos: 0
    };

    // Verificar se o texto contém a palavra "GOLEIRO"
    let isGoleiro = texto.includes("GOLEIRO");
    console.log("É goleiro?", isGoleiro);

    if (isGoleiro) {
        console.log("Processando como goleiro...");
        // Atributos específicos de goleiro
        atributos.alc = extrairAtributo(texto, /ALC\s+(\d+)/);
        atributos.ref = extrairAtributo(texto, /REF\s+(\d+)/);
        atributos.con = extrairAtributo(texto, /CON\s+(\d+)/);
        atributos.exp = extrairAtributo(texto, /EXP\s+(\d+)/);
        atributos.rep = extrairAtributo(texto, /REP\s+(\d+)/);
        atributos.pos = extrairAtributo(texto, /POS\s+(\d+)/);

    } else {
        console.log("Processando como jogador de linha...");
        // Atributos padrão para jogadores de linha
        atributos.pas = extrairAtributo(texto, /PAS\s+(\d+)/);
        atributos.fin = extrairAtributo(texto, /FIN\s+(\d+)/);
        atributos.dri = extrairAtributo(texto, /DRI\s+(\d+)/);
        atributos.vel = extrairAtributo(texto, /VEL\s+(\d+)/);
        atributos.def = extrairAtributo(texto, /DEF\s+(\d+)/);
        atributos.res = extrairAtributo(texto, /RES\s+(\d+)/);
    }

    console.log("Atributos extraídos:", atributos); // Exibir atributos extraídos

    return atributos;
}

function extrairAtributo(texto, regex) {
    let match = texto.match(regex);
    return match ? parseInt(match[2]) : 0; // Retorna 0 caso não encontre
}

// Função para comparar jogadores
function compararJogadores(jogador1, jogador2, isGoleiro1, isGoleiro2) {
    let output = 'Comparando jogadores:\n\n';

    // Verificar se os jogadores são do mesmo tipo (ambos goleiros ou ambos jogadores de linha)
    if (isGoleiro1 !== isGoleiro2) {
        return 'Erro: Não é possível comparar um goleiro com um jogador de linha.';
    }

    const atributosJogador1 = extrairDadosJogador(jogador1.text);
    const atributosJogador2 = extrairDadosJogador(jogador2.text);

    // Definir os atributos para comparar
    const atributos = isGoleiro1 || isGoleiro2
    ? ["alc", "con", "rep", "ref", "exp", "pos"]  // Atributos de goleiro
    : ["pas", "fin", "dri", "vel", "def", "res"]; // Atributos de jogador de linha

    // Comparação dos atributos
    atributos.forEach(atributo => {
        const valor1 = atributosJogador1[atributo];
        const valor2 = atributosJogador2[atributo];
        let vantagem = "";
        if (valor1 > valor2) {
            vantagem = `(vantagem para Jogador 1)`;
        } else if (valor2 > valor1) {
            vantagem = `(vantagem para Jogador 2)`;
        }
        output += `${atributo.toUpperCase()}: ${valor1} vs ${valor2} ${vantagem}\n`;
    });

    return output;
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('comparar-jogadores')
        .setDescription('Compara dois jogadores.')
        .addStringOption(option =>
    option.setName('jogador1')
        .setDescription('Nome do primeiro jogador')
        .setRequired(true))
        .addStringOption(option =>
    option.setName('jogador2')
        .setDescription('Nome do segundo jogador')
        .setRequired(true))
        .addStringOption(option =>
    option.setName('goleiro')
        .setDescription('Ambos os jogadores são goleiros?')
        .setRequired(true)
        .addChoices(
        { name: 'Sim', value: 'sim' },
        { name: 'Não', value: 'nao' }
    )
    ),
async execute(interaction) {
    const jogador1 = interaction.options.getString('jogador1');
    const jogador2 = interaction.options.getString('jogador2');
    const goleiro = interaction.options.getString('goleiro');

    // Se for goleiro, trata ambos como goleiros
    const isGoleiro = goleiro === 'sim';

    const isGoleiro1 = jogador1.includes("ALC"); // Verifica se tem atributos de goleiro
    const isGoleiro2 = jogador2.includes("ALC"); // Verifica se tem atributos de goleiro

    // Se os jogadores não forem do mesmo tipo, retorna um erro
    if (isGoleiro1 !== isGoleiro2) {
        return interaction.reply({
            content: 'Erro: Não é possível comparar um goleiro com um jogador de linha.',
            ephemeral: true,
        });
    }

    await interaction.reply(`Comparando ${jogador1} e ${jogador2}. Aguarde...\n\nUse o comando \`..contratar ${jogador1}\` no canal do DreamTeam.`);

// Obter o canal do DreamTeam (substitua pelo ID do canal correto)
const dreamTeamChannel = interaction.guild.channels.cache.get('1300428798700814407');
if (!dreamTeamChannel) {
    return interaction.followUp('Canal do DreamTeam não encontrado.');
}

try {
    // Capturar a resposta do comando ..contratar jogador1
    const filter1 = m => m.author.id === '1052214694020141178' && m.embeds.length > 0;
    const message1 = await dreamTeamChannel.awaitMessages({ filter: filter1, max: 1, time: 30000, errors: ['time'] });
    const imageUrl1 = message1.first().embeds[0].image.url;

    // Baixar a imagem do jogador1
    const response1 = await fetch(imageUrl1);
    const buffer1 = await response1.buffer();

    // Aplicar OCR na imagem do jogador1
    const { data: { text: text1 } } = await Tesseract.recognize(buffer1);
    const dadosJogador1 = extrairDadosJogador(text1, isGoleiro1);

    await interaction.followUp(`Agora use o comando \`..contratar ${jogador2}\` no canal do DreamTeam.`);

// Capturar a resposta do comando ..contratar jogador2
const filter2 = m => m.author.id === '1052214694020141178' && m.embeds.length > 0;
const message2 = await dreamTeamChannel.awaitMessages({ filter: filter2, max: 1, time: 30000, errors: ['time'] });
const imageUrl2 = message2.first().embeds[0].image.url;

// Baixar a imagem do jogador2
const response2 = await fetch(imageUrl2);
const buffer2 = await response2.buffer();

// Aplicar OCR na imagem do jogador2
const { data: { text: text2 } } = await Tesseract.recognize(buffer2);
const dadosJogador2 = extrairDadosJogador(text2, isGoleiro2);

const resultado = compararJogadores(dadosJogador1, dadosJogador2, isGoleiro1, isGoleiro2);
await interaction.followUp(resultado);
} catch (error) {
console.error(error);
await interaction.followUp('Houve um erro ao processar a comparação. Tente novamente mais tarde.');
}
}
};